idBA=mf$idBA
databaseA=mf$databaseA
databaseB =mf$ databaseB
datA=mf$datA # matching variables
datB= mf$datB
#####
# linked1= linkage_data (databaseB, databaseA) #method theorique
# pp=linked1$pp
#  Q=linked1$Q
# naive_id=linked1$naive_id
#record linkage
comp_mat = compare_binary (datA, datB, K)
linked = EM_binary( comp_mat,datA, datB, K, e = error,tol = 1e-6, maxits = 2000)
Q=linked$Q
apply(Q,1,sum)
it = linked$it
converge = linked$converge
comp_mat.1 = linked$comp_mat.1
naive_id = linked$naive_id
#####naive
Ndata = generate_naive_data(naive_id,XB , surv_data)
naive_data = Ndata$data_naive
Z = as.matrix(naive_data[,-c(1,2)])
Ts = data_true$Time
event = data_true$delta
lambda0 =  rep(0.1,length(event))
lambda0 [which(event == 0)] = 0
beta0 = rep(0.1,p)
# times of event
# death_times= Ts[which(event==1)]
# Theoretical estimating equation for true and naive data
fit_true = coxph(Surv(Time,delta)~.,data = data_true)
coef_true_s[i,] = as.vector(fit_true$coefficients)
# naive method
fit_naive = coxph_equa_naive(Ts,event, Z, maxiter = 20)
coef_naive_s[i,] = fit_naive$coef
converge_naive[i] = fit_naive$converge
# EM method
fit_estimate = Func_itteration(beta0,lambda0,Ts,event,XB,Q,tol= 1e-6,maxits = 600)
coef_estimate_s[i,] = fit_estimate$beta0
it_EM = fit_estimate$it
}
return(list( coef_true_s1 = coef_true_s[,1], coef_true_s2 = coef_true_s[,2],
coef_naive_s1 = coef_naive_s[,1], coef_naive_s2 = coef_naive_s[,2],
coef_estimate_s1 = coef_estimate_s[,1], coef_estimate_s2 = coef_estimate_s[,2],
converge_estimate = converge_estimate))  }
######################################
setwd("C:/Users/fchezeut/Documents/GitHub/Cox_matched_data/code_Q_inconnu")
for (i in (1:nrow(scenarios))){
nsim=scenarios[i,1]
nB=scenarios[i,2]
nA=scenarios[i,3]
results_sample = estimates_survival(nsim,nA,nB,p,beta) #monte carlos
filename = paste0("C:/Users/fchezeut/Documents/GitHub/Cox_matched_data/code_Q_inconnu/Results/","nsim=",nsim,
"_nA=",nA, "_nB=",nB,".Rdata")
save(results_sample,file = filename)
}
#data generation
mf = Generate_data(K,nA,nB,prevalence, error, min_prev = 0.01)
surv_data = mf$surv_data
XB = mf$XB
data_true=surv_data
idBA=mf$idBA
databaseA=mf$databaseA
databaseB =mf$ databaseB
datA=mf$datA # matching variables
datB= mf$datB
#record linkage
comp_mat = compare_binary (datA, datB, K)
linked = EM_binary( comp_mat,datA, datB, K, e = error,tol = 1e-6, maxits = 2000)
Q=linked$Q
apply(Q,1,sum)
it = linked$it
converge = linked$converge
comp_mat.1 = linked$comp_mat.1
naive_id = linked$naive_id
linked = EM_binary( comp_mat,datA, datB, K, e = error,tol = 1e-6, maxits = 2000)
linked = EM_binary( comp_mat,datA, datB, K, e = error,tol = 1e-6, maxits = 2000)
compare1 <- function(k, datA, datB, K){
XA.k = datA[,k]
XB.k = datB[,k]
temp = expand.grid( XB.k,XA.k)
gamma.k = as.numeric(temp[,1]==temp[,2])
return(gamma.k)
}
# Starting point
nA =  nrow(datA)
N <- nrow(comp_mat)
p = nA/N
prev = (colMeans(datB[,1:K]))
u = ((1-e)*(1-prev) + e*prev)*(1-prev) + prev*((1-e)*prev+e*(1-prev))
m = rep(1 - e,K)
#u=(colSums(datA[-(K+1)])/ nA )*prev  + ((nA-colSums(datA[-(K+1)]))/ nA )*(1-prev)
#m= ( colSums(datA[-(K+1)])/colSums(datB[-(K+1)]))*prev + ((nA -colSums(datA[-(K+1)]) )/(nB -colSums(datB[-(K+1)]) ))*(1-prev)
#u= rep(0.5,K)
e =0.02
tol = 1e-5
maxits = 2000
# Starting point
nA =  nrow(datA)
N <- nrow(comp_mat)
p = nA/N
prev = (colMeans(datB[,1:K]))
u = ((1-e)*(1-prev) + e*prev)*(1-prev) + prev*((1-e)*prev+e*(1-prev))
m = rep(1 - e,K)
# initializations
comp_mat  <- comp_mat[,1:K]
g = rep(0,N) # probability of being in Match  for each pair l
it = 0
converge = FALSE
while ((!converge) & (it < maxits)){
p.old = p
m.old = m
u.old = u
### E
# Compute expectation
m_mat = matrix(rep(m,N), nrow =N, byrow = TRUE)
u_mat = matrix(rep(u,N), nrow =N, byrow = TRUE)
probM = rowProds(m_mat^(comp_mat)*(1-m_mat)^(1-comp_mat))
probU = rowProds(u_mat^(comp_mat)*(1-u_mat)^(1-comp_mat))
g = p*probM/(p*probM+(1-p)*probU)
### Maximization
g_mat = matrix(rep(g,K),ncol = K)
p = sum(g)/N
m = colSums(g_mat*comp_mat)/sum(g)
u = colSums((1-g_mat)*comp_mat)/sum(1-g)
if (length(which(m > 0.99999)) > 0) {
m[which(m > 0.99999)] <- 0.99999
}
if (length(which(m < 1e-05)) > 0) {
m[which(m < 1e-05)] <- 1e-05
}
if (length(which(u > 0.99999)) > 0) {
u[which(u > 0.99999)] <- 0.99999
}
if (length(which(u < 1e-05)) > 0) {
u[which(u < 1e-05)] <- 1e-05
}
it = it + 1
converge <- (abs(p.old - p)/p.old < tol) &&
all(abs(m.old - m)/m.old < tol) &&
all(abs(u.old - u)/u.old < tol)
if (it == maxits) {
cat("WARNING! NOT CONVERGENT!", "\n")
converge = FALSE
}
}
comp_mat.1 <- as.data.frame(comp_mat)
comp_mat.1 $g <- g
nA <- nrow(datA)
nB <-  nrow(datB)
matrice_norm <- t( matrix(g,ncol=nA,nrow=nB))
naive_id = apply( matrice_norm,1, which.max)
vect_sum <- apply(matrice_norm,1, sum)
vect_sum <-matrix( rep(vect_sum,nB), ncol = nB,nrow = nA)
Q <- matrice_norm/vect_sum
apply(Q,1,sum)
library(survival)
library(rootSolve)
library(nleqslv)
setwd("C:/Users/fchezeut/Documents/GitHub/Cox_matched_data/code_Q_inconnu")
source("1_EM_data_generate.R")
source("2_1_EM_record_linkage.R")
source("Record_linkage.R")
source("2_EM_risk_function.R")
source("3_EM_naive_method.R")
source("6_EM_method_EM.R")
source("7_EM_scenarios.R")
#data generation
mf = Generate_data(K,nA,nB,prevalence, error, min_prev = 0.01)
surv_data = mf$surv_data
XB = mf$XB
data_true=surv_data
idBA=mf$idBA
databaseA=mf$databaseA
databaseB =mf$ databaseB
datA=mf$datA # matching variables
datB= mf$datB
#record linkage
comp_mat = compare_binary (datA, datB, K)
linked = EM_binary( comp_mat,datA, datB, K, e = error,tol = 1e-6, maxits = 2000)
Q=linked$Q
apply(Q,1,sum)
it = linked$it
converge = linked$converge
comp_mat.1 = linked$comp_mat.1
naive_id = linked$naive_id
#####naive
Ndata = generate_naive_data(naive_id,XB , surv_data)
naive_data = Ndata$data_naive
Z = as.matrix(naive_data[,-c(1,2)])
Ts = data_true$Time
event = data_true$delta
lambda0 =  rep(0.1,length(event))
lambda0 [which(event == 0)] = 0
beta0 = rep(0.1,p)
# Theoretical estimating equation for true and naive data
fit_true = coxph(Surv(Time,delta)~.,data = data_true)
as.vector(fit_true$coefficients)
# naive method
fit_naive = coxph_equa_naive(Ts,event, Z, maxiter = 20)
fit_naive$coef
# EM method
fit_estimate = Func_itteration(beta0,lambda0,Ts,event,XB,Q,tol= 1e-6,maxits = 600)
fit_estimate$beta0
# EM method
fit_estimate = Func_itteration(beta0,lambda0,Ts,event,XB,Q,tol= 1e-6,maxits = 800)
fit_estimate$beta0
# EM method
fit_estimate = Func_itteration(beta0,lambda0,Ts,event,XB,Q,tol= 1e-6,maxits = 1000)
fit_estimate$it
fit_estimate$beta0
library(survival)
library(rootSolve)
library(nleqslv)
setwd("C:/Users/fchezeut/Documents/GitHub/Cox_matched_data/code_Q_inconnu")
source("1_EM_data_generate.R")
source("2_1_EM_record_linkage.R")
source("Record_linkage.R")
source("2_EM_risk_function.R")
source("3_EM_naive_method.R")
source("6_EM_method_EM.R")
source("7_EM_scenarios.R")
################### nsim monte carlos
estimates_survival<- function(nsim,nA,nB,p,beta){
coef_true_s = matrix(0,nrow = nsim, ncol = p)
coef_naive_s = matrix(0,nrow = nsim, ncol = p)
converge_naive = vector()
coef_estimate_s = matrix(0,nrow = nsim, ncol = p)
converge_estimate = vector()
for (i in 1:nsim){
#data generation
mf = Generate_data(K,nA,nB,prevalence, error, min_prev = 0.01)
surv_data = mf$surv_data
XB = mf$XB
data_true=surv_data
idBA=mf$idBA
databaseA=mf$databaseA
databaseB =mf$ databaseB
datA=mf$datA # matching variables
datB= mf$datB
#####
# linked1= linkage_data (databaseB, databaseA) #method theorique
# pp=linked1$pp
#  Q=linked1$Q
# naive_id=linked1$naive_id
#record linkage
comp_mat = compare_binary (datA, datB, K)
linked = EM_binary( comp_mat,datA, datB, K, e = error,tol = 1e-6, maxits = 2000)
Q=linked$Q
apply(Q,1,sum)
it = linked$it
converge = linked$converge
comp_mat.1 = linked$comp_mat.1
naive_id = linked$naive_id
#####naive
Ndata = generate_naive_data(naive_id,XB , surv_data)
naive_data = Ndata$data_naive
Z = as.matrix(naive_data[,-c(1,2)])
Ts = data_true$Time
event = data_true$delta
lambda0 =  rep(0.1,length(event))
lambda0 [which(event == 0)] = 0
beta0 = rep(0.1,p)
# times of event
# death_times= Ts[which(event==1)]
# Theoretical estimating equation for true and naive data
fit_true = coxph(Surv(Time,delta)~.,data = data_true)
coef_true_s[i,] = as.vector(fit_true$coefficients)
# naive method
fit_naive = coxph_equa_naive(Ts,event, Z, maxiter = 20)
coef_naive_s[i,] = fit_naive$coef
converge_naive[i] = fit_naive$converge
# EM method
fit_estimate = Func_itteration(beta0,lambda0,Ts,event,XB,Q,tol= 1e-6,maxits = 1000)
coef_estimate_s[i,] = fit_estimate$beta0
it_EM = fit_estimate$it
}
return(list( coef_true_s1 = coef_true_s[,1], coef_true_s2 = coef_true_s[,2],
coef_naive_s1 = coef_naive_s[,1], coef_naive_s2 = coef_naive_s[,2],
coef_estimate_s1 = coef_estimate_s[,1], coef_estimate_s2 = coef_estimate_s[,2],
converge_estimate = converge_estimate))  }
######################################
setwd("C:/Users/fchezeut/Documents/GitHub/Cox_matched_data/code_Q_inconnu")
for (i in (1:nrow(scenarios))){
nsim=scenarios[i,1]
nB=scenarios[i,2]
nA=scenarios[i,3]
results_sample = estimates_survival(nsim,nA,nB,p,beta) #monte carlos
filename = paste0("C:/Users/fchezeut/Documents/GitHub/Cox_matched_data/code_Q_inconnu/Results/","nsim=",nsim,
"_nA=",nA, "_nB=",nB,".Rdata")
save(results_sample,file = filename)
}
library(survival)
library(rootSolve)
library(nleqslv)
setwd("C:/Users/fchezeut/Documents/GitHub/Cox_matched_data/code_Q_inconnu")
source("1_EM_data_generate.R")
source("2_1_EM_record_linkage.R")
#source("Record_linkage.R")
source("2_EM_risk_function.R")
source("3_EM_naive_method.R")
source("6_EM_method_EM.R")
source("7_EM_scenarios.R")
################### nsim monte carlos
estimates_survival<- function(nsim,nA,nB,p,beta){
coef_true_s = matrix(0,nrow = nsim, ncol = p)
coef_naive_s = matrix(0,nrow = nsim, ncol = p)
converge_naive = vector()
coef_estimate_s = matrix(0,nrow = nsim, ncol = p)
converge_estimate = vector()
for (i in 1:nsim){
#data generation
mf = Generate_data(K,nA,nB,prevalence, error, min_prev = 0.01)
surv_data = mf$surv_data
XB = mf$XB
data_true=surv_data
idBA=mf$idBA
databaseA=mf$databaseA
databaseB =mf$ databaseB
datA=mf$datA # matching variables
datB= mf$datB
#####
# linked1= linkage_data (databaseB, databaseA) #method theorique
# pp=linked1$pp
#  Q=linked1$Q
# naive_id=linked1$naive_id
#record linkage
comp_mat = compare_binary (datA, datB, K)
linked = EM_binary( comp_mat,datA, datB, K, e = 0.02,tol = 1e-6, maxits = 2000)
Q=linked$Q
apply(Q,1,sum)
it = linked$it
converge = linked$converge
comp_mat.1 = linked$comp_mat.1
naive_id = linked$naive_id
#####naive
Ndata = generate_naive_data(naive_id,XB , surv_data)
naive_data = Ndata$data_naive
Z = as.matrix(naive_data[,-c(1,2)])
Ts = data_true$Time
event = data_true$delta
lambda0 =  rep(0.1,length(event))
lambda0 [which(event == 0)] = 0
beta0 = rep(0.1,p)
# times of event
# death_times= Ts[which(event==1)]
# Theoretical estimating equation for true and naive data
fit_true = coxph(Surv(Time,delta)~.,data = data_true)
coef_true_s[i,] = as.vector(fit_true$coefficients)
# naive method
fit_naive = coxph_equa_naive(Ts,event, Z, maxiter = 20)
coef_naive_s[i,] = fit_naive$coef
converge_naive[i] = fit_naive$converge
# EM method
fit_estimate = Func_itteration(beta0,lambda0,Ts,event,XB,Q,tol= 1e-6,maxits = 1000)
coef_estimate_s[i,] = fit_estimate$beta0
it_EM = fit_estimate$it
}
return(list( coef_true_s1 = coef_true_s[,1], coef_true_s2 = coef_true_s[,2],
coef_naive_s1 = coef_naive_s[,1], coef_naive_s2 = coef_naive_s[,2],
coef_estimate_s1 = coef_estimate_s[,1], coef_estimate_s2 = coef_estimate_s[,2],
converge_estimate = converge_estimate))  }
######################################
setwd("C:/Users/fchezeut/Documents/GitHub/Cox_matched_data/code_Q_inconnu")
for (i in (1:nrow(scenarios))){
nsim=scenarios[i,1]
nB=scenarios[i,2]
nA=scenarios[i,3]
results_sample = estimates_survival(nsim,nA,nB,p,beta) #monte carlos
filename = paste0("C:/Users/fchezeut/Documents/GitHub/Cox_matched_data/code_Q_inconnu/Results/","nsim=",nsim,
"_nA=",nA, "_nB=",nB,".Rdata")
save(results_sample,file = filename)
}
######################## ####################
##############     m fixed and Q varies            ######
### boxplots
setwd("C:/Users/fchezeut/Documents/GitHub/Cox_matched_data/code_Q_inconnu")
source("7_EM_scenarios.R")
varies = "nA"
fixed="beta"
library(ggplot2)
library(gridExtra)
library(xtable)
boxplot_beta0 = NULL
# size fix
for (i in (1:nrow(scenarios))){
nsim = scenarios[i,1]
nB = scenarios[i,2]
nA = scenarios[i,3]
load(paste0("C:/Users/fchezeut/Documents/GitHub/Cox_matched_data/code_Q_inconnu/Results/",
"nsim=",nsim,"_nA=",nA,"_nB=",nB, ".Rdata"))
results_sample = results_sample
boxplot_beta0_true = cbind(rep(1,times=nsim),
rep(nA,times=nsim),
results_sample$coef_true_s1,
results_sample$coef_true_s2)
boxplot_beta0_naive = cbind(rep(2,times=nsim),
rep(nA,times=nsim),
results_sample$coef_naive_s1,
results_sample$coef_naive_s2)
boxplot_beta0_estimate = cbind(rep(3,times=nsim),
rep(nA,times=nsim),
results_sample$coef_estimate_s1,
results_sample$coef_estimate_s2)
boxplot_beta0 = rbind(boxplot_beta0,boxplot_beta0_true,boxplot_beta0_naive,
boxplot_beta0_estimate  )
}
titlename =paste ("error=", error)
colnames(boxplot_beta0) = c("Estimator",varies, "beta0.1","beta0.2")
boxplot_beta0 = data.frame(boxplot_beta0)
boxplot_beta0[,1] = factor(boxplot_beta0[,1],
levels = 1:3, labels = c("True"," Naive","EM"))
boxplot_beta0[,2] = as.factor(boxplot_beta0[,2] )
boxplot_beta0[,3] = as.numeric(boxplot_beta0[,3] )
boxplot_beta0[,4] = as.numeric(boxplot_beta0[,4] )
# Boxplots for beta0
beta0_1 = ggplot(boxplot_beta0,aes(x=nA,y= beta0.1,fill=Estimator))+
geom_boxplot()+
xlab(varies)+
ylab(quote(hat(beta)[1]))+
geom_hline(yintercept=beta[1],lty=1,col="orange")+
ggtitle(titlename)
beta0_1
beta0_2 = ggplot(boxplot_beta0,aes(x=nA,y= beta0.2,fill=Estimator))+
geom_boxplot()+
xlab(varies)+
ylab(quote(hat(beta)[2]))+
geom_hline(yintercept=beta[2],lty=1,col="orange")+
ggtitle(titlename)
beta0_2
library(survival)
library(rootSolve)
library(nleqslv)
setwd("C:/Users/fchezeut/Documents/GitHub/Cox_matched_data/code_Q_inconnu")
source("1_EM_data_generate.R")
source("2_1_EM_record_linkage.R")
#source("Record_linkage.R")
source("2_EM_risk_function.R")
source("3_EM_naive_method.R")
source("6_EM_method_EM.R")
source("7_EM_scenarios.R")
################### nsim monte carlos
estimates_survival<- function(nsim,nA,nB,p,beta){
coef_true_s = matrix(0,nrow = nsim, ncol = p)
coef_naive_s = matrix(0,nrow = nsim, ncol = p)
converge_naive = vector()
coef_estimate_s = matrix(0,nrow = nsim, ncol = p)
converge_estimate = vector()
for (i in 1:nsim){
#data generation
mf = Generate_data(K,nA,nB,prevalence, error, min_prev = 0.01)
surv_data = mf$surv_data
XB = mf$XB
data_true=surv_data
idBA=mf$idBA
databaseA=mf$databaseA
databaseB =mf$ databaseB
datA=mf$datA # matching variables
datB= mf$datB
#####
# linked1= linkage_data (databaseB, databaseA) #method theorique
# pp=linked1$pp
#  Q=linked1$Q
# naive_id=linked1$naive_id
#record linkage
comp_mat = compare_binary (datA, datB, K)
linked = EM_binary( comp_mat,datA, datB, K, e = 0.02,tol = 1e-6, maxits = 2000)
Q=linked$Q
apply(Q,1,sum)
it = linked$it
converge = linked$converge
comp_mat.1 = linked$comp_mat.1
naive_id = linked$naive_id
#####naive
Ndata = generate_naive_data(naive_id,XB , surv_data)
naive_data = Ndata$data_naive
Z = as.matrix(naive_data[,-c(1,2)])
Ts = data_true$Time
event = data_true$delta
lambda0 =  rep(0.1,length(event))
lambda0 [which(event == 0)] = 0
beta0 = rep(0.1,p)
# times of event
# death_times= Ts[which(event==1)]
# Theoretical estimating equation for true and naive data
fit_true = coxph(Surv(Time,delta)~.,data = data_true)
coef_true_s[i,] = as.vector(fit_true$coefficients)
# naive method
fit_naive = coxph_equa_naive(Ts,event, Z, maxiter = 20)
coef_naive_s[i,] = fit_naive$coef
converge_naive[i] = fit_naive$converge
# EM method
fit_estimate = Func_itteration(beta0,lambda0,Ts,event,XB,Q,tol= 1e-6,maxits = 1000)
coef_estimate_s[i,] = fit_estimate$beta0
it_EM = fit_estimate$it
}
return(list( coef_true_s1 = coef_true_s[,1], coef_true_s2 = coef_true_s[,2],
coef_naive_s1 = coef_naive_s[,1], coef_naive_s2 = coef_naive_s[,2],
coef_estimate_s1 = coef_estimate_s[,1], coef_estimate_s2 = coef_estimate_s[,2],
converge_estimate = converge_estimate))  }
######################################
setwd("C:/Users/fchezeut/Documents/GitHub/Cox_matched_data/code_Q_inconnu")
for (i in (1:nrow(scenarios))){
nsim=scenarios[i,1]
nB=scenarios[i,2]
nA=scenarios[i,3]
results_sample = estimates_survival(nsim,nA,nB,p,beta) #monte carlos
filename = paste0("C:/Users/fchezeut/Documents/GitHub/Cox_matched_data/code_Q_inconnu/Results/","nsim=",nsim,
"_nA=",nA, "_nB=",nB,".Rdata")
save(results_sample,file = filename)
}
