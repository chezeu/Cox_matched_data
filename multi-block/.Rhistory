######
datA<-ft$datA
datB<-ft$datB
datA<- cbind(datA, block= blockA)
XB <- as.data.frame(cbind(X, block = blockB))
XB <- as.data.frame(cbind(XB, block = blockB))
datB<- cbind(datB, block= blockB)
datA
blockA = rep(block, nA)
blockB = rep(block, nB)
# Survival data (Database B)
ft<- Generate_data(K,nA,nB,prevalence, min_prev = 0.01)
surv_data<-ft$surv_data
XB <- ft$XB #Only covariates
XB
######
datA<-ft$datA
datB<-ft$datB
datA<- cbind(datA, block= blockA)
XB <- as.data.frame(cbind(XB, block = blockB))
datB<- cbind(datB, block= blockB)
datA
XB
surv_data
datA
blockA = rep(block, nA)
blockB = rep(block, nB)
# Survival data (Database B)
ft<- Generate_data(K,nA,nB,prevalence, min_prev = 0.01)
surv_data<-ft$surv_data
XB <- ft$XB #Only covariates
######
datA<-ft$datA
datB<-ft$datB
datA<- cbind(datA, block= blockA)
XB <- as.data.frame(cbind(XB, block = blockB))
datB<- cbind(datB, block= blockB)
################
##################################### 1 block ###########################
generate_1block <- function(K,nA, nB, p,prevalence, beta,block){
blockA = rep(block, nA)
blockB = rep(block, nB)
# Survival data (Database B)
ft<- Generate_data(K,nA,nB,prevalence, min_prev = 0.01)
surv_data<-ft$surv_data
XB <- ft$XB #Only covariates
######
datA<-ft$datA
datB<-ft$datB
datA<- cbind(datA, block= blockA)
XB <- as.data.frame(cbind(XB, block = blockB))
datB<- cbind(datB, block= blockB)
return(list( surv_data = surv_data, datA = datA, XB = XB, datB = datB))
}
datA
nA_block=c(5,7,10)
nB_block=c(10,14,20)
q = length(nA_block)
# for one block (q=1)
nA = nA_block[1]
nB = nB_block[1]
data_block = generate_1block (K,nA, nB, p,prevalence, beta,block=1)
datA = data_block$datA
datB = data_block$datB
XB <- data_block$XB
surv_data = data_block$surv_data
# q >= 2
for (i in 2:q){
nA = nA_block[i]
nB = nB_block[i]
data_block = generate_1block (K,nA, nB, p,prevalence, beta,block=i)
datA = rbind(datA,data_block$datA)
datB = rbind(datB,data_block$datB)
XB = rbind(XB,data_block$XB)
surv_data = rbind(surv_data, data_block$surv_data)
}
return(list(datA = datA,  XB = XB, datB = datB,surv_data = surv_data))
datB
# nA_block== size of blocks in the database A
# q = number of block
multi_block <- function( K, nA_block, nB_block, p, prevalence, beta){
q = length(nA_block)
# for one block (q=1)
nA = nA_block[1]
nB = nB_block[1]
data_block = generate_1block (K,nA, nB, p,prevalence, beta,block=1)
datA = data_block$datA
datB = data_block$datB
XB <- data_block$XB
surv_data = data_block$surv_data
# q >= 2
for (i in 2:q){
nA = nA_block[i]
nB = nB_block[i]
data_block = generate_1block (K,nA, nB, p,prevalence, beta,block=i)
datA = rbind(datA,data_block$datA)
datB = rbind(datB,data_block$datB)
XB = rbind(XB,data_block$XB)
surv_data = rbind(surv_data, data_block$surv_data)
}
return(list(datA = datA,  XB = XB, datB = datB,surv_data = surv_data))
}
# nA_block== size of blocks in the database A
# q = number of block
multi_block <- function( K, nA_block, nB_block, p, prevalence, beta){
q = length(nA_block)
# for one block (q=1)
nA = nA_block[1]
nB = nB_block[1]
data_block = generate_1block (K,nA, nB, p,prevalence, beta,block=1)
datA = data_block$datA
datB = data_block$datB
XB <- data_block$XB
surv_data = data_block$surv_data
# q >= 2
for (i in 2:q){
nA = nA_block[i]
nB = nB_block[i]
data_block = generate_1block (K,nA, nB, p,prevalence, beta,block=i)
datA = rbind(datA,data_block$datA)
datB = rbind(datB,data_block$datB)
XB = rbind(XB,data_block$XB)
surv_data = rbind(surv_data, data_block$surv_data)
}
return(list(datA = datA,  XB = XB, datB = datB,surv_data = surv_data))
}
compare1 <- function(k, datA, datB, K){
XA.k = datA[,k]
XB.k = datB[,k]
temp = expand.grid( XB.k,XA.k)
gamma.k = as.numeric(temp[,1]==temp[,2])
return(gamma.k)
}
S=NULL
comp_mat =NULL
for (i in 1:length(nA_block)) {
comp_mat_block = sapply(1:K, FUN = compare1, datA = datA[which(datA$block==i),],
datB = datB[which(datB$block==i),], K =K)
vect_gamma= vector()
for (j in 1: nrow(comp_mat_block)) {
if(sum(comp_mat_block [j,])==K){vect_gamma[j]=1
}else {vect_gamma[j]=0 }
}
S = c(S,which(vect_gamma==1) )
comp_mat_block2= cbind(comp_mat_block,vect_gamma,rep(i,nrow(comp_mat_block)))
comp_mat=rbind(comp_mat,comp_mat_block2)
}
colnames(comp_mat)=c(paste("C_R", 1:K, sep=""), "vect_gamma", "block" )
View(comp_mat)
compare_binary <- function(datA, datB, K, nA_block){
compare1 <- function(k, datA, datB, K){
XA.k = datA[,k]
XB.k = datB[,k]
temp = expand.grid( XB.k,XA.k)
gamma.k = as.numeric(temp[,1]==temp[,2])
return(gamma.k)
}
S=NULL
comp_mat =NULL
for (i in 1:length(nA_block)) {
comp_mat_block = sapply(1:K, FUN = compare1, datA = datA[which(datA$block==i),],
datB = datB[which(datB$block==i),], K =K)
vect_gamma= vector()
for (j in 1: nrow(comp_mat_block)) {
if(sum(comp_mat_block [j,])==K){vect_gamma[j]=1
}else {vect_gamma[j]=0 }
}
S = c(S,which(vect_gamma==1) )
comp_mat_block2= cbind(comp_mat_block,vect_gamma,rep(i,nrow(comp_mat_block)))
comp_mat=rbind(comp_mat,comp_mat_block2)
}
colnames(comp_mat)=c(paste("C_R", 1:K, sep=""), "vect_gamma", "block" )
return(comp_mat)
}
surv_data
Q= matrix(0, nrow=nrow(datA),ncol = nrow(datB))
comp_mat= data.frame(comp_mat)
vect_gamma= comp_mat$vect_gamma # comparison pairs
l=1
m=1
for (q in 1:length(nA_block)) {
nA=nA_block[q]
nB=nB_block[q]
mat_block = t( matrix(comp_mat$vect_gamma[which(comp_mat$block==q)],
ncol=nA,nrow=nB))
Q[m:(nA+m-1),l:(nB+l-1)] = mat_block
m= nA + m
l = nB + l
}
View(Q)
#identification = apply(Q,1, FUN= function(x){which(x==1)}) # common variables
number = apply(Q,1, FUN= function(x){length(which(x==1))}) # number of common individual
Q= Q/number
number
naive_id = apply(Q,1, which.max)
naive_id
Matrix_Q = function(comp_mat,K,datA,datB,nA_block,nB_block){
Q= matrix(0, nrow=nrow(datA),ncol = nrow(datB))
comp_mat= data.frame(comp_mat)
vect_gamma= comp_mat$vect_gamma # comparison pairs
l=1
m=1
for (q in 1:length(nA_block)) {
nA=nA_block[q]
nB=nB_block[q]
mat_block = t( matrix(comp_mat$vect_gamma[which(comp_mat$block==q)],
ncol=nA,nrow=nB))
Q[m:(nA+m-1),l:(nB+l-1)] = mat_block
m= nA + m
l = nB + l
}
#identification = apply(Q,1, FUN= function(x){which(x==1)}) # common variables
number = apply(Q,1, FUN= function(x){length(which(x==1))}) # number of common individual
Q= Q/number
naive_id = apply(Q,1, which.max)
return(list(Q=Q, naive_id=naive_id))
}
library(survival)
library(rootSolve)
library(nleqslv)
setwd("C:/Users/fchezeut/Documents/GitHub/Cox-matched-data/multi-block")
source("02_data_generate.R")
source("03_block.R")
source("04_risk_function.R")
source("05_naive_method.R")
source("06_method_w_sum1.R")
source("07_method_w_sum2.R")
source("08_EM_method_EM.R")
source("09_scenarios.R")
################### nsim monte carlos
estimates_survival<- function(nsim,nA,nB,p,beta,K,prevalence){
coef_true_s = matrix(0,nrow = nsim, ncol = p)
coef_naive_s = matrix(0,nrow = nsim, ncol = p)
converge_naive = vector()
coef_w_sum1_s= matrix(0,nrow = nsim, ncol = p)
converge_w_sum1 = vector()
coef_w_sum2_s = matrix(0,nrow = nsim, ncol = p)
converge_w_sum2 = vector()
coef_estimate_s = matrix(0,nrow = nsim, ncol = p)
converge_estimate = vector()
for (i in 1:nsim){
#data generation
mf = multi_block ( K,nA_block, nB_block, p, prevalence, beta)
surv_data = mf$surv_data
XB = mf$XB[,-4]
data_true=surv_data
# databaseA=mf$databaseA
#databaseB =mf$ databaseB
datA=mf$datA # matching variables
datB= mf$datB
#####
#record linkage
comp_mat = compare_binary (datA, datB, K, nA_block )
linked = Matrix_Q(comp_mat,K,datA, datB,nA_block,nB_block)
Q=linked$Q
apply(Q,1,sum)
naive_id = linked$naive_id
#####naive
Ndata = generate_naive_data(naive_id,XB , surv_data)
naive_data = Ndata$data_naive
Z = as.matrix(naive_data[,-c(1,2,6)])
Ts = data_true$Time
event = data_true$delta
lambda0 =  rep(0.1,length(event))
lambda0 [which(event == 0)] = 0
beta0 = rep(0.1,p)
# times of event
# death_times= Ts[which(event==1)]
# Theoretical estimating equation for true and naive data
fit_true = coxph(Surv(Time,delta)~.,data = data_true)
coef_true_s[i,] = as.vector(fit_true$coefficients)
# naive method
fit_naive = coxph_equa_naive(Ts,event, Z, maxiter = 20)
coef_naive_s[i,] = fit_naive$coef
converge_naive[i] = fit_naive$converge
# method with weighted average
fit_w_sum1 = coxph_w_sum1(Ts,event,XB, Q,maxiter = 20)
coef_w_sum1_s[i,] = fit_w_sum1$coef
converge_w_sum1[i] = fit_w_sum1$converge
#method with the maximum of proba
fit_w_sum2 = coxph_w_sum2(Ts,event,XB, Q, maxiter = 20)
coef_w_sum2_s[i,] = fit_w_sum2$coef
converge_w_sum2[i] = fit_w_sum2$converge
# EM method
fit_estimate = Func_itteration(beta0,lambda0,Ts,event,XB,Q,tol= 1e-6,maxits = 300)
coef_estimate_s[i,] = fit_estimate$beta0
it_EM = fit_estimate$it
}
return(list( coef_true_s1 = coef_true_s[,1], coef_true_s2 = coef_true_s[,2],coef_true_s3 = coef_true_s[,3],
coef_naive_s1 = coef_naive_s[,1], coef_naive_s2 = coef_naive_s[,2], coef_naive_s3 = coef_naive_s[,3], coef_w_sum1_s1 = coef_w_sum1_s[,1],
coef_w_sum1_s2 = coef_w_sum1_s[,2],coef_w_sum1_s3 = coef_w_sum1_s[,3], coef_w_sum2_s1 = coef_w_sum2_s[,1], coef_w_sum2_s2 = coef_w_sum2_s[,2],
coef_w_sum2_s3 = coef_w_sum2_s[,3], coef_estimate_s1 = coef_estimate_s[,1], coef_estimate_s2 = coef_estimate_s[,2],
coef_estimate_s3 = coef_estimate_s[,3],  converge_naive = converge_naive,
converge_w_sum1= converge_w_sum1,converge_w_sum2 = converge_w_sum2, converge_estimate = converge_estimate ))
}
######################################
setwd("C:/Users/fchezeut/Documents/GitHub/Cox-matched-data/multi-block")
for (i in (1:nrow(scenarios))){
nsim=scenarios[i,1]
K=scenarios[i,2]
nA=scenarios[i,3]
nB= scenarios[i,4]
nA_block= c(scenarios[i,5],scenarios[i,6],scenarios[i,7] )
nB_block= c(scenarios[i,8],scenarios[i,9],scenarios[i,10] )
prevalence = rep(prevalence_sample, K/length(prevalence_sample))
results_sample = estimates_survival(nsim,nA,nB,p,beta,K,prevalence) #monte carlos
filename = paste0("C:/Users/fchezeut/Documents/GitHub/Cox-matched-data/multi-block/Results/","nsim=",nsim,
"_nA=",nA, "_K=",K,".Rdata")
save(results_sample,file = filename)
}
######################## ####################
##############     m fixed and Q varies            ######
### boxplots
setwd("C:/Users/fchezeut/Documents/GitHub/Cox-matched-data/multi-block")
source("09_scenarios.R")
#scenarios_boxplot=scenarios[scenarios$nA==100,]
#scenarios_boxplot=scenarios[scenarios$nA==500,]
scenarios_boxplot=scenarios[scenarios$nA==100,]
varies = "K"
fixed="nA"
library(ggplot2)
library(gridExtra)
library(xtable)
boxplot_beta0 = NULL
# size fix
for (i in (1:nrow(scenarios_boxplot))){
nsim = scenarios_boxplot[i,1]
K = scenarios_boxplot[i,2]
nA = scenarios_boxplot[i,3]
nB= scenarios_boxplot[i,4]
nA_block= c(scenarios[i,5],scenarios[i,6],scenarios[i,7] )
nB_block= c(scenarios[i,8],scenarios[i,9],scenarios[i,10] )
filename = paste0("C:/Users/fchezeut/Documents/GitHub/Cox-matched-data/multi-block/Results/","nsim=",nsim,
"_nA=",nA, "_K=",K,".Rdata")
results_sample = results_sample
boxplot_beta0_true = cbind(rep(1,times=nsim),
rep(K,times=nsim),
rep(nA, times=nsim),
results_sample$coef_true_s1,
results_sample$coef_true_s2,
results_sample$coef_true_s3)
boxplot_beta0_naive = cbind(rep(2,times=nsim),
rep(K,times=nsim),
rep(nA, times=nsim),
results_sample$coef_naive_s1,
results_sample$coef_naive_s2,
results_sample$coef_naive_s3)
boxplot_beta0_w_sum1 = cbind(rep(3,times=nsim),
rep(K,times=nsim),
rep(nA,times=nsim),
results_sample$coef_w_sum1_s1,
results_sample$coef_w_sum1_s2,
results_sample$coef_w_sum1_s3)
boxplot_beta0_w_sum2 = cbind(rep(4,times=nsim),
rep(K,times=nsim),
rep(nA,times=nsim),
results_sample$coef_w_sum2_s1,
results_sample$coef_w_sum2_s2,
results_sample$coef_w_sum2_s3)
boxplot_beta0_estimate = cbind(rep(5,times=nsim),
rep(K,times=nsim),
rep(nA, times=nsim),
results_sample$coef_estimate_s1,
results_sample$coef_estimate_s2,
results_sample$coef_estimate_s3)
boxplot_beta0 = rbind( boxplot_beta0,boxplot_beta0_true,boxplot_beta0_naive,
boxplot_beta0_w_sum1,boxplot_beta0_w_sum2,
boxplot_beta0_estimate  )
}
titlename =paste ("nA=", nA, "nB=", nB)
colnames(boxplot_beta0) = c("Estimator", varies, fixed,"beta0.1","beta0.2","beta0.3")
boxplot_beta0 = data.frame(boxplot_beta0)
boxplot_beta0[,1] = factor(boxplot_beta0[,1],
levels = 1:5, labels = c("True"," Naive", "weighted average", "2-max weighted average", "EM"))
boxplot_beta0[,2] = as.factor(boxplot_beta0[,2] )
boxplot_beta0[,3] = as.factor(boxplot_beta0[,3] )
boxplot_beta0[,4] = as.numeric(boxplot_beta0[,4] )
boxplot_beta0[,5] = as.numeric(boxplot_beta0[,5] )
boxplot_beta0[,6] = as.numeric(boxplot_beta0[,6] )
# Boxplots for beta0
beta0_1 = ggplot(boxplot_beta0,aes(x=K,y= beta0.1,fill=Estimator))+
geom_boxplot()+
xlab(varies)+
ylab(quote(hat(beta)[1]))+
geom_hline(yintercept=beta[1],lty=1,col="orange")+
ggtitle(titlename)
beta0_1
beta0_2 = ggplot(boxplot_beta0,aes(x=K,y= beta0.2,fill=Estimator))+
geom_boxplot()+
xlab(varies)+
ylab(quote(hat(beta)[2]))+
geom_hline(yintercept=beta[2],lty=1,col="orange")+
ggtitle(titlename)
beta0_2
beta0_3 = ggplot(boxplot_beta0,aes(x=K,y= beta0.3,fill=Estimator))+
geom_boxplot()+
xlab(varies)+
ylab(quote(hat(beta)[3]))+
geom_hline(yintercept=beta[3],lty=1,col="orange")+
ggtitle(titlename)
beta0_3
# histogram
#data_histogram = boxplot_beta0[which(boxplot_beta0$Estimator==unique(boxplot_beta0$Estimator)[3]),]
#K_hist = unique(data_histogram$K)
#for (i in 1:length(K_hist)) {
# k= K_hist[i]
#  beta_hist =data_histogram[which(data_histogram$K==k),]
#  hist(beta_hist$beta0.1, xlab= quote(hat(beta)[1]),main = paste("nA =",unique( beta_hist$nA),",","K=",unique( beta_hist$K)))
# hist(beta_hist$beta0.2, xlab= quote(hat(beta)[2]),main = paste("nA =",unique( beta_hist$nA),",","K=",unique( beta_hist$K)))
#hist(beta_hist$beta0.3, xlab= quote(hat(beta)[3]),main = paste("nA =",unique( beta_hist$nA),",","K=",unique( beta_hist$K)))
#}
#########################################################
########################################
setwd("C:/Users/fchezeut/Documents/GitHub/Cox-matched-data/multi-block")
source("09_scenarios.R")
scenarios_boxplot=scenarios[scenarios$K==7,]
#scenarios_boxplot=scenarios[scenarios$K==14,]
#scenarios_boxplot=scenarios[scenarios$K==21,]
varies = "nA"
fixed="K"
library(ggplot2)
library(gridExtra)
library(xtable)
boxplot_beta0 = NULL
# size fix
for (i in (1:nrow(scenarios_boxplot))){
nsim = scenarios_boxplot[i,1]
K = scenarios_boxplot[i,2]
nA = scenarios_boxplot[i,3]
nB= scenarios_boxplot[i,4]
nA_block= c(scenarios[i,5],scenarios[i,6],scenarios[i,7] )
nB_block= c(scenarios[i,8],scenarios[i,9],scenarios[i,10] )
filename = paste0("C:/Users/fchezeut/Documents/GitHub/Cox-matched-data/multi-block/Results/","nsim=",nsim,
"_nA=",nA, "_K=",K,".Rdata")
results_sample = results_sample
boxplot_beta0_true = cbind(rep(1,times=nsim),
rep(K,times=nsim),
rep(nA, times=nsim),
results_sample$coef_true_s1,
results_sample$coef_true_s2,
results_sample$coef_true_s3)
boxplot_beta0_naive = cbind(rep(2,times=nsim),
rep(K,times=nsim),
rep(nA, times=nsim),
results_sample$coef_naive_s1,
results_sample$coef_naive_s2,
results_sample$coef_naive_s3)
boxplot_beta0_w_sum1 = cbind(rep(3,times=nsim),
rep(K,times=nsim),
rep(nA,times=nsim),
results_sample$coef_w_sum1_s1,
results_sample$coef_w_sum1_s2,
results_sample$coef_w_sum1_s3)
boxplot_beta0_w_sum2 = cbind(rep(4,times=nsim),
rep(K,times=nsim),
rep(nA,times=nsim),
results_sample$coef_w_sum2_s1,
results_sample$coef_w_sum2_s2,
results_sample$coef_w_sum2_s3)
boxplot_beta0_estimate = cbind(rep(5,times=nsim),
rep(K,times=nsim),
rep(nA, times=nsim),
results_sample$coef_estimate_s1,
results_sample$coef_estimate_s2,
results_sample$coef_estimate_s3)
boxplot_beta0 = rbind( boxplot_beta0,boxplot_beta0_true,boxplot_beta0_naive,
boxplot_beta0_w_sum1,boxplot_beta0_w_sum2,
boxplot_beta0_estimate  )
}
titlename =paste ("K=", K)
colnames(boxplot_beta0) = c("Estimator",fixed, varies, "beta0.1","beta0.2","beta0.3")
boxplot_beta0 = data.frame(boxplot_beta0)
boxplot_beta0[,1] = factor(boxplot_beta0[,1],
levels = 1:5, labels = c("True"," Naive", "weighted average", "2-max weighted average", "EM"))
boxplot_beta0[,2] = as.factor(boxplot_beta0[,2] )
boxplot_beta0[,3] = as.factor(boxplot_beta0[,3] )
boxplot_beta0[,4] = as.numeric(boxplot_beta0[,4] )
boxplot_beta0[,5] = as.numeric(boxplot_beta0[,5] )
boxplot_beta0[,6] = as.numeric(boxplot_beta0[,6] )
# Boxplots for beta0
beta0_1 = ggplot(boxplot_beta0,aes(x=nA,y= beta0.1,fill=Estimator))+
geom_boxplot()+
xlab(varies)+
ylab(quote(hat(beta)[1]))+
geom_hline(yintercept=beta[1],lty=1,col="orange")+
ggtitle(titlename)
beta0_1
beta0_2 = ggplot(boxplot_beta0,aes(x=nA,y= beta0.2,fill=Estimator))+
geom_boxplot()+
xlab(varies)+
ylab(quote(hat(beta)[2]))+
geom_hline(yintercept=beta[2],lty=1,col="orange")+
ggtitle(titlename)
beta0_2
beta0_3 = ggplot(boxplot_beta0,aes(x=nA,y= beta0.3,fill=Estimator))+
geom_boxplot()+
xlab(varies)+
ylab(quote(hat(beta)[3]))+
geom_hline(yintercept=beta[3],lty=1,col="orange")+
ggtitle(titlename)
beta0_3
#########################################################
############# Histogram
data_histogram = boxplot_beta0[which(boxplot_beta0$Estimator==unique(boxplot_beta0$Estimator)[3]),]
nA_hist = unique(data_histogram$nA)
for (i in 1:length(nA_hist)) {
n = nA_hist[i]
beta_hist =data_histogram[which(data_histogram$nA==n),]
hist(beta_hist$beta0.1, xlab= quote(hat(beta)[1]),main = paste("nA =", n,",","K=",unique(data_histogram$K)))
hist(beta_hist$beta0.2, xlab= quote(hat(beta)[2]),main = paste("nA =", n,",","K=",unique(data_histogram$K)))
hist(beta_hist$beta0.2, xlab= quote(hat(beta)[3]),main = paste("nA =", n,",","K=",unique(data_histogram$K)))
}
