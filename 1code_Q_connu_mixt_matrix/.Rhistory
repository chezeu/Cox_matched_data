rep(   nB , times=nsim ),
results_sample$coef_true_s1,
results_sample$coef_true_s2,
results_sample$coef_true_s3)
boxplot_beta0_naive = cbind(rep(2,times=nsim),
rep(v_matrix,times=nsim),
rep(  nB, times=nsim ),
results_sample$coef_naive_s1,
results_sample$coef_naive_s2,
results_sample$coef_naive_s3)
boxplot_beta0_w_sum1 = cbind(rep(3,times=nsim),
rep(v_matrix,times=nsim),
rep( nB , times=nsim ),
results_sample$coef_w_sum1_s1,
results_sample$coef_w_sum1_s2,
results_sample$coef_w_sum1_s3)
boxplot_beta0_w_sum2 = cbind(rep(4,times=nsim),
rep(v_matrix,times=nsim),
rep( nB, times=nsim ),
results_sample$coef_w_sum2_s1,
results_sample$coef_w_sum2_s2,
results_sample$coef_w_sum2_s3)
boxplot_beta0_Q_sum = cbind(rep(5,times=nsim),
rep(v_matrix,times=nsim),
rep( nB, times=nsim),
results_sample$coef_Q_sum_s1,
results_sample$coef_Q_sum_s2,
results_sample$coef_Q_sum_s3)
boxplot_beta0_estimate = cbind(rep(6,times=nsim),
rep(v_matrix,times=nsim),
rep( nB, times=nsim ),
results_sample$coef_estimate_s1,
results_sample$coef_estimate_s2,
results_sample$coef_estimate_s3)
boxplot_beta0 = rbind(boxplot_beta0,boxplot_beta0_true,boxplot_beta0_naive,boxplot_beta0_w_sum1,
boxplot_beta0_w_sum2, boxplot_beta0_Q_sum,boxplot_beta0_estimate )
}
varies
colnames(boxplot_beta0) = c("Estimator",varies,"nB", "beta0.1","beta0.2","beta0.3")
View(addition)
View(boxplot_beta0)
boxplot_beta0 = data.frame(boxplot_beta0)
boxplot_beta0[,1] = factor(boxplot_beta0[,1],
levels = 1:6,labels = c("Theorical", "Naive", "weighted average", "2-max weighted average", "Q_weighted average", "EM"))
boxplot_beta0[,2] = factor(boxplot_beta0[,2] )
boxplot_beta0[,3] = factor(boxplot_beta0[,3] )
boxplot_beta0[,4] = as.numeric(boxplot_beta0[,4] )
boxplot_beta0[,5] = as.numeric(boxplot_beta0[,5] )
boxplot_beta0[,6] = as.numeric(boxplot_beta0[,6] )
beta0_1_R = ggplot(boxplot_beta0,aes(x=R,y= beta0.1,fill=Estimator))+
geom_boxplot()+
xlab(quote(R))+
ylab(quote(hat(beta)[1]))+
geom_hline(yintercept=beta[1],lty=1,col="orange")
beta0_1_R = ggplot(boxplot_beta0,aes(x=v_matrix,y= beta0.1,fill=Estimator))+
geom_boxplot()+
xlab(quote(R))+
ylab(quote(hat(beta)[1]))+
geom_hline(yintercept=beta[1],lty=1,col="orange")
beta0_1_R
beta0_2_R = ggplot(boxplot_beta0,aes(x=v_matrix,y= beta0.2,fill=Estimator))+
geom_boxplot()+
theme(legend.position = "none")+
xlab(quote(R))+
ylab(quote(hat(beta)[2]))+
geom_hline(yintercept=beta[2],lty=1,col="orange")
beta0_2_R
beta0_3_R = ggplot(boxplot_beta0,aes(x=v_matrix,y= beta0.3,fill=Estimator))+
geom_boxplot()+
theme(legend.position = "none")+
xlab(quote(R))+
ylab(quote(hat(beta)[3]))+
geom_hline(yintercept=beta[3],lty=1,col="orange")
beta0_3_R
figure <- ggarrange(beta0_1_alpha, beta0_2_alpha, beta0_3_alpha,
beta0_1_nA, beta0_2_nA, beta0_3_nA,
beta0_1_censor, beta0_2_censor, beta0_3_censor,
beta0_1_R, beta0_2_R, beta0_3_R,
common.legend = TRUE,
ncol = 3, nrow = 4)
#######  alpha varied #########################
setwd("C:/Users/fchezeut/Documents/GitHub/Cox-matched-data/1code_Q_connu_mixt_matrix")
source("7_scenarios.R")
#scenarios_boxplot=scenarios[scenarios$nA==100,]
#scenarios_boxplot=scenarios[scenarios$nA==500,]
scenarios_boxplot=scenarios[(scenarios$nA==1000 & scenarios$nB!=4000)&
(scenarios$censor==2.948469& scenarios$nB!=6000),]
varies="alpha"
fixed= "nA"
library(ggplot2)
library(gridExtra)
library(ggpubr)
#theme_set(theme_bw() + theme(legend.position = "top"))
theme_set(theme(legend.position = "top"))
boxplot_beta0 = NULL
# size fix
for (i in (1:nrow(scenarios_boxplot))){
nsim = scenarios_boxplot[i,1]
nB = scenarios_boxplot[i,2]
nA = scenarios_boxplot[i,3]
alpha=scenarios_boxplot[i,4]
censor=scenarios_boxplot[i,5]
load(paste0("C:/Users/fchezeut/Documents/GitHub/Cox-matched-data/1code_Q_connu_mixt_matrix/Results/","nsim=",nsim,
"_nA=",nA,"_alpha=",alpha,"_censor=",censor,".Rdata"))
results_sample = results_sample
boxplot_beta0_true = cbind(rep(1,times=nsim),
rep(nA,times=nsim),
rep( alpha , times=nsim ),
results_sample$coef_true_s1,
results_sample$coef_true_s2,
results_sample$coef_true_s3)
boxplot_beta0_naive = cbind(rep(2,times=nsim),
rep(nA,times=nsim),
rep(alpha, times=nsim ),
results_sample$coef_naive_s1,
results_sample$coef_naive_s2,
results_sample$coef_naive_s3)
boxplot_beta0_w_sum1 = cbind(rep(3,times=nsim),
rep(nA,times=nsim),
rep(alpha,times=nsim ),
results_sample$coef_w_sum1_s1,
results_sample$coef_w_sum1_s2,
results_sample$coef_w_sum1_s3)
boxplot_beta0_w_sum2 = cbind(rep(4,times=nsim),
rep(nA,times=nsim),
rep(alpha,times=nsim ),
results_sample$coef_w_sum2_s1,
results_sample$coef_w_sum2_s2,
results_sample$coef_w_sum2_s3)
boxplot_beta0_Q_sum = cbind(rep(5,times=nsim),
rep(nA,times=nsim),
rep(alpha,times=nsim ),
results_sample$coef_Q_sum_s1,
results_sample$coef_Q_sum_s2,
results_sample$coef_Q_sum_s3)
boxplot_beta0_estimate = cbind(rep(6,times=nsim),
rep(nA,times=nsim),
rep(alpha,times=nsim ),
results_sample$coef_estimate_s1,
results_sample$coef_estimate_s2,
results_sample$coef_estimate_s3)
boxplot_beta0 = rbind(boxplot_beta0,boxplot_beta0_true,boxplot_beta0_naive,boxplot_beta0_w_sum1,
boxplot_beta0_w_sum2,boxplot_beta0_Q_sum,boxplot_beta0_estimate )
}
colnames(boxplot_beta0) = c("Estimator",fixed,varies,"beta0.1","beta0.2","beta0.3")
boxplot_beta0 = data.frame(boxplot_beta0)
boxplot_beta0[,1] = factor(boxplot_beta0[,1],
levels = 1:6,labels = c("Theorical"," Naive", "weighted average", "2-max weighted average","Q_weighted average", "EM"))
boxplot_beta0[,2] = factor(boxplot_beta0[,2] )
boxplot_beta0[,3] = factor(boxplot_beta0[,3] )
boxplot_beta0[,4] = as.numeric(boxplot_beta0[,4] )
#scenarios_boxplot=scenarios[scenarios$nA==100,]
#scenarios_boxplot=scenarios[scenarios$nA==500,]
scenarios_boxplot=scenarios[(scenarios$nA==1000 & scenarios$nB!=4000)&
(scenarios$censor==2.948469& scenarios$nB!=6000),]
scenarios_boxplot
varies="alpha"
fixed= "nA"
library(ggplot2)
library(gridExtra)
library(ggpubr)
#theme_set(theme_bw() + theme(legend.position = "top"))
theme_set(theme(legend.position = "top"))
boxplot_beta0 = NULL
# size fix
for (i in (1:nrow(scenarios_boxplot))){
nsim = scenarios_boxplot[i,1]
nB = scenarios_boxplot[i,2]
nA = scenarios_boxplot[i,3]
alpha=scenarios_boxplot[i,4]
censor=scenarios_boxplot[i,5]
load(paste0("C:/Users/fchezeut/Documents/GitHub/Cox-matched-data/1code_Q_connu_mixt_matrix/Results/","nsim=",nsim,
"_nA=",nA,"_alpha=",alpha,"_censor=",censor,".Rdata"))
results_sample = results_sample
boxplot_beta0_true = cbind(rep(1,times=nsim),
rep(nA,times=nsim),
rep( alpha , times=nsim ),
results_sample$coef_true_s1,
results_sample$coef_true_s2,
results_sample$coef_true_s3)
boxplot_beta0_naive = cbind(rep(2,times=nsim),
rep(nA,times=nsim),
rep(alpha, times=nsim ),
results_sample$coef_naive_s1,
results_sample$coef_naive_s2,
results_sample$coef_naive_s3)
boxplot_beta0_w_sum1 = cbind(rep(3,times=nsim),
rep(nA,times=nsim),
rep(alpha,times=nsim ),
results_sample$coef_w_sum1_s1,
results_sample$coef_w_sum1_s2,
results_sample$coef_w_sum1_s3)
boxplot_beta0_w_sum2 = cbind(rep(4,times=nsim),
rep(nA,times=nsim),
rep(alpha,times=nsim ),
results_sample$coef_w_sum2_s1,
results_sample$coef_w_sum2_s2,
results_sample$coef_w_sum2_s3)
boxplot_beta0_Q_sum = cbind(rep(5,times=nsim),
rep(nA,times=nsim),
rep(alpha,times=nsim ),
results_sample$coef_Q_sum_s1,
results_sample$coef_Q_sum_s2,
results_sample$coef_Q_sum_s3)
boxplot_beta0_estimate = cbind(rep(6,times=nsim),
rep(nA,times=nsim),
rep(alpha,times=nsim ),
results_sample$coef_estimate_s1,
results_sample$coef_estimate_s2,
results_sample$coef_estimate_s3)
boxplot_beta0 = rbind(boxplot_beta0,boxplot_beta0_true,boxplot_beta0_naive,boxplot_beta0_w_sum1,
boxplot_beta0_w_sum2,boxplot_beta0_Q_sum,boxplot_beta0_estimate )
}
colnames(boxplot_beta0) = c("Estimator",fixed,varies,"beta0.1","beta0.2","beta0.3")
scenarios_boxplot
figure <- ggarrange(beta0_1_R, beta0_2_R, beta0_3_R,
common.legend = TRUE,
ncol = 2, nrow = 2)
figure
############### SCENARIOS
nA_sample = c(100,500,1000) # must be highest than 30
nB_sample = 2*nA_sample
p = 3
nsim =50
beta = c(0.5,-0.5,1)
#(1.610541 3.039472 6.341335) for nA=100 (no difference with nA=1000)
censor_sample=c(1.553309,2.948469,6.392605)# for 40%,30%,20%
v_matrix=c(3,6,9)
############## Table of scenarios
#scenarios = NULL
#for (i in 1:length(nA_sample)){
#nA = nA_sample[i]
# nB= nB_sample[i]
#  for (j in 1: length(nA_sample)) {
#  scenarios = rbind(scenarios,c(nsim,nB,nA))
# }
#}
#colnames(scenarios) = c("nsim","nB","nA")
#scenarios=data.frame(scenarios)
##################### New scenario #####################
alpha_p = c(0.8,0.9,1) # proportion of individual in (1,0,0)
scenarios = NULL
for (i in 1:length(nA_sample)){
nA = nA_sample[i]
nB= nB_sample[i]
censor= censor_sample[2]
matrix= v_matrix[1]
for (j in 1: length(nA_sample)) {
scenarios = rbind(scenarios,c(nsim,nB,nA,alpha_p[j],censor,matrix))
}
}
colnames(scenarios) = c("nsim","nB","nA","alpha","censor","v_matrix")
addition = rbind(c(nsim,nB_sample[3], nA_sample[3] ,alpha_p[2], censor_sample[1],v_matrix[1]),
c(nsim,nB_sample[3], nA_sample[3] ,alpha_p[2], censor_sample[3],v_matrix[1]),
c(nsim,nB_sample[1], nA_sample[1] ,alpha_p[2], censor_sample[2],v_matrix[2]),
c(nsim,nB_sample[1], nA_sample[1] ,alpha_p[2], censor_sample[2],v_matrix[3]))
scenarios=rbind(scenarios,addition)
scenarios=data.frame(scenarios)
scenarios
library(survival)
library(rootSolve)
library(nleqslv)
setwd("C:/Users/fchezeut/Documents/GitHub/Cox-matched-data/1code_Q_connu_mixt_matrix")
source("1_data_generate.R")
source("2_risk_function.R")
source("3_naive_method.R")
source("4_method_w_sum1.R")
source("5_method_w_sum2.R")
source("6_method_EM.R")
source("6_1_method_q_sum.R")
source("7_scenarios.R")
################### nsim monte carlos
estimates_survival<- function(nsim,nA,nB,p,beta,alpha,censor){
coef_true_s = matrix(0,nrow = nsim, ncol = p)
coef_naive_s = matrix(0,nrow = nsim, ncol = p)
converge_naive = vector()
coef_w_sum1_s = matrix(0,nrow = nsim, ncol = p)
converge_w_sum1 = vector()
coef_w_sum2_s = matrix(0,nrow = nsim, ncol = p)
converge_w_sum2 = vector()
coef_estimate_s = matrix(0,nrow = nsim, ncol = p)
converge_estimate = vector()
coef_Q_sum_s = matrix(0,nrow = nsim, ncol = p)
converge_Q_sum = vector()
# matrix
#  Q = matrix(0, nA, nB)
# t1= round((alpha*nA)) #individuals with (1,0,0)
#  t2= nA - t1 #individuals with (0.6,0.2,0.2)
# for (i in 1:t1) {
#    vec = sample(1:nB, 3)
#   Q[i,vec] = c(1,0,0)
#  }
# if(t1!=nA){
#  for (i in (t1+1):nA ){
#   vec = sample(1:nB, 3)
#  Q[i,vec] = c(0.6,0.2,0.2)
#  }
#  }
# matrix with variation of the number of possible match
Q = matrix(0, nA, nB)
t1= round((alpha*nA)) #individuals with (1,0,0,0)
t2= nA - t1 #individuals with different possible matche
v1= c(0.6,0.2,0.2) # 3 possible matches
v2= c(0.3,0.2,0.2,rep(0.1,3)) # 6 possible matches
v3= c(0.2,rep(0.1, 8)) # 9 possible matches
nbre= c(3,6,9)
if(v_matrix==3){
for (i in 1:t1) {
vec = sample(1:nB, nbre[1])
Q[i,vec] = c(1,rep(0,(nbre[1]-1)))
}
if(t1!=nA){
for (i in (t1+1):nA ){
vec = sample(1:nB, nbre[1])
Q[i,vec] = v1
}
}
}
if(v_matrix==6){
for (i in 1:t1) {
vec = sample(1:nB, nbre[2])
Q[i,vec] = c(1,rep(0,(nbre[2]-1)))
}
if(t1!=nA){
for (i in (t1+1):nA ){
vec = sample(1:nB, nbre[2])
Q[i,vec] = v2
}
}
}
if(v_matrix==9){
for (i in 1:t1) {
vec = sample(1:nB, nbre[3])
Q[i,vec] = c(1,rep(0,(nbre[3]-1)))
}
if(t1!=nA){
for (i in (t1+1):nA ){
vec = sample(1:nB, nbre[3])
Q[i,vec] = v3
}
}
}
########################  #number of individuals with percentage of true matches
#  t1=round((60*nA)/100) # individuals with (0.8,0.1,0.1)
# t2=round((20*nA)/100) #individuals with (0.6,0.2,0.2)
# t3= nA -(t1+t2) #individuals with (0.4,0.3,0.3)
# for (i in 1:t1) {
#   vec = sample(1:nB, 3)
#   Q[i,vec] = c(0.8,0.1,0.1)
# }
# for (i in (t1+1):(t1+t2) ){
#   vec = sample(1:nB, 3)
#   Q[i,vec] = c(0.6,0.2,0.2)
# }
# for (i in (t1+t2+1):(t1+t2+t3) ){
#   vec = sample(1:nB, 3)
#   Q[i,vec] = c(0.4,0.3,0.3)
# }
#############################  ##
for (i in 1:nsim){
#data generation
mf = Generate_data(nB,nA,beta,Q,censor)
surv_data = mf$surv_data
XB = mf$XB
data_naive = mf$data_naive
data_true=surv_data
Ts = data_true$Time
event = data_true$delta
Z = as.matrix(data_naive[,3:(p+2)])
lambda0 =  rep(0.1,length(event))
lambda0 [which(event == 0)] = 0
beta0 = rep(0.1,p)
# times of event
# death_times= Ts[which(event==1)]
# Theoretical estimating equation for true and naive data
fit_true = coxph(Surv(Time,delta)~.,data = data_true)
coef_true_s[i,] = as.vector(fit_true$coefficients)
# naive method
fit_naive = coxph_equa_naive(Ts,event, Z, maxiter = 20)
coef_naive_s[i,] = fit_naive$coef
converge_naive[i] = fit_naive$converge
# method with weighted average
fit_w_sum1 = coxph_w_sum1(Ts,event,XB, Q,maxiter = 20)
coef_w_sum1_s[i,] = fit_w_sum1$coef
converge_w_sum1[i] = fit_w_sum1$converge
#method with the maximum of proba
fit_w_sum2 = coxph_w_sum2(Ts,event,XB, Q, maxiter = 20)
coef_w_sum2_s[i,] = fit_w_sum2$coef
converge_w_sum2[i] = fit_w_sum2$converge
# method with Q average
fit_Q_sum = coxph_Q_sum(Ts,event,XB, Q,maxiter = 20)
coef_Q_sum_s[i,] = fit_Q_sum$coef
converge_Q_sum[i] = fit_Q_sum$converge
# EM method
fit_estimate = Func_itteration(beta0,lambda0,Ts,event,XB,Q,tol= 1e-6,maxits = 500)
coef_estimate_s[i,] = fit_estimate$beta0
converge_estimate[i] = as.numeric(fit_estimate$converge)
}
return(list( coef_true_s1 = coef_true_s[,1], coef_true_s2 = coef_true_s[,2],coef_true_s3 = coef_true_s[,3],
coef_naive_s1 = coef_naive_s[,1], coef_naive_s2 = coef_naive_s[,2], coef_naive_s3 = coef_naive_s[,3],
coef_w_sum1_s1 = coef_w_sum1_s[,1],coef_w_sum1_s2 = coef_w_sum1_s[,2],coef_w_sum1_s3 = coef_w_sum1_s[,3],
coef_w_sum2_s1 = coef_w_sum2_s[,1], coef_w_sum2_s2 = coef_w_sum2_s[,2],coef_w_sum2_s3 = coef_w_sum2_s[,3],
coef_Q_sum_s1 = coef_Q_sum_s[,1],coef_Q_sum_s2 = coef_Q_sum_s[,2], coef_Q_sum_s3= coef_Q_sum_s[,3],
coef_estimate_s1 = coef_estimate_s[,1], coef_estimate_s2 = coef_estimate_s[,2],  coef_estimate_s3 = coef_estimate_s[,3],
converge_naive = converge_naive,  converge_w_sum1= converge_w_sum1,
converge_w_sum2 = converge_w_sum2, converge_Q_sum= converge_Q_sum,converge_estimate = converge_estimate ))  }
######################################
setwd("C:/Users/fchezeut/Documents/GitHub/Cox-matched-data/1code_Q_connu_mixt_matrix")
for (i in c(2,12,13)){
nsim=scenarios[i,1]
nB=scenarios[i,2]
nA=scenarios[i,3]
alpha = scenarios[i,4]
censor=scenarios[i,5]
v_matrix=scenarios[i,6]
results_sample = estimates_survival(nsim,nA,nB,p,beta,alpha,censor) #monte carlos
filename = paste0("C:/Users/fchezeut/Documents/GitHub/Cox-matched-data/1code_Q_connu_mixt_matrix/Results/","nsim=",nsim,
"_nA=",nA,"_nB=",nB,"_alpha=",alpha,"_censor=",censor,"_v_matrix=",v_matrix,".Rdata")
save(results_sample,file = filename)
}
setwd("C:/Users/fchezeut/Documents/GitHub/Cox-matched-data/1code_Q_connu_mixt_matrix")
source("7_scenarios.R")
#scenarios_boxplot=scenarios[scenarios$alpha==0.8,]
scenarios_boxplot =  scenarios[c(2,12, 13), ]
fixed= "nA"
varies="v_matrix"
library(ggplot2)
library(gridExtra)
library(ggpubr)
boxplot_beta0 = NULL
# size fix
for (i in (1:nrow(scenarios_boxplot))){
nsim = scenarios_boxplot[i,1]
nB = scenarios_boxplot[i,2]
nA = scenarios_boxplot[i,3]
alpha=scenarios_boxplot[i,4]
censor=scenarios_boxplot[i,5]
v_matrix = scenarios_boxplot[i,6]
load(paste0("C:/Users/fchezeut/Documents/GitHub/Cox-matched-data/1code_Q_connu_mixt_matrix/Results/","nsim=",nsim,
"_nA=",nA,"_nB=",nB,"_alpha=",alpha,"_censor=",censor,"_v_matrix=",v_matrix,".Rdata"))
results_sample = results_sample
#size= paste0("alpha=", nA)
boxplot_beta0_true = cbind(rep(1,times=nsim),
rep(v_matrix,times=nsim),
rep(   nB , times=nsim ),
results_sample$coef_true_s1,
results_sample$coef_true_s2,
results_sample$coef_true_s3)
boxplot_beta0_naive = cbind(rep(2,times=nsim),
rep(v_matrix,times=nsim),
rep(  nB, times=nsim ),
results_sample$coef_naive_s1,
results_sample$coef_naive_s2,
results_sample$coef_naive_s3)
boxplot_beta0_w_sum1 = cbind(rep(3,times=nsim),
rep(v_matrix,times=nsim),
rep( nB , times=nsim ),
results_sample$coef_w_sum1_s1,
results_sample$coef_w_sum1_s2,
results_sample$coef_w_sum1_s3)
boxplot_beta0_w_sum2 = cbind(rep(4,times=nsim),
rep(v_matrix,times=nsim),
rep( nB, times=nsim ),
results_sample$coef_w_sum2_s1,
results_sample$coef_w_sum2_s2,
results_sample$coef_w_sum2_s3)
boxplot_beta0_Q_sum = cbind(rep(5,times=nsim),
rep(v_matrix,times=nsim),
rep( nB, times=nsim),
results_sample$coef_Q_sum_s1,
results_sample$coef_Q_sum_s2,
results_sample$coef_Q_sum_s3)
boxplot_beta0_estimate = cbind(rep(6,times=nsim),
rep(v_matrix,times=nsim),
rep( nB, times=nsim ),
results_sample$coef_estimate_s1,
results_sample$coef_estimate_s2,
results_sample$coef_estimate_s3)
boxplot_beta0 = rbind(boxplot_beta0,boxplot_beta0_true,boxplot_beta0_naive,boxplot_beta0_w_sum1,
boxplot_beta0_w_sum2, boxplot_beta0_Q_sum,boxplot_beta0_estimate )
}
colnames(boxplot_beta0) = c("Estimator",varies,"nB", "beta0.1","beta0.2","beta0.3")
boxplot_beta0 = data.frame(boxplot_beta0)
boxplot_beta0[,1] = factor(boxplot_beta0[,1],
levels = 1:6,labels = c("Theorical", "Naive", "weighted average", "2-max weighted average", "Q_weighted average", "EM"))
boxplot_beta0[,2] = factor(boxplot_beta0[,2] )
boxplot_beta0[,3] = factor(boxplot_beta0[,3] )
boxplot_beta0[,4] = as.numeric(boxplot_beta0[,4] )
boxplot_beta0[,5] = as.numeric(boxplot_beta0[,5] )
boxplot_beta0[,6] = as.numeric(boxplot_beta0[,6] )
beta0_1_R = ggplot(boxplot_beta0,aes(x=v_matrix,y= beta0.1,fill=Estimator))+
geom_boxplot()+
xlab(quote(R))+
ylab(quote(hat(beta)[1]))+
geom_hline(yintercept=beta[1],lty=1,col="orange")
beta0_1_R
beta0_2_R = ggplot(boxplot_beta0,aes(x=v_matrix,y= beta0.2,fill=Estimator))+
geom_boxplot()+
theme(legend.position = "none")+
xlab(quote(R))+
ylab(quote(hat(beta)[2]))+
geom_hline(yintercept=beta[2],lty=1,col="orange")
beta0_3_R = ggplot(boxplot_beta0,aes(x=v_matrix,y= beta0.3,fill=Estimator))+
geom_boxplot()+
theme(legend.position = "none")+
xlab(quote(R))+
ylab(quote(hat(beta)[3]))+
geom_hline(yintercept=beta[3],lty=1,col="orange")
figure <- ggarrange(beta0_1_R, beta0_2_R, beta0_3_R,
common.legend = TRUE,
ncol = 2, nrow = 2)
figure
