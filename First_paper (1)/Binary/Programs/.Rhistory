#df <- df %>% separate(methods)
df1$methods = factor(df1$methods)
results1 <- df1 %>% group_by(K, p0M, alphaM, p0U, methods) %>% dplyr::summarize(
B = n(),
TPR.mean = mean(value, na.rm = TRUE),
TPR.sd = sd(value, na.rm =TRUE)
)
results1
View(results1)
View(results1)
View(results1)
library(simsalapar)
library(doParallel)
library(clue)
library(matrixStats)
library(klaR)
library(ludic)
nA = 500
nB = 200
K = 25
error = 0.05
setwd("C:\\Users\\thanhvo\\Dropbox\\R_program\\First_paper\\Binary\\Programs")
source("1_generate_data.R")
source("2_compare.R")
source("3_EM.R")
source("4_methods.R")
data = generate_data(nA = nA, nB = nB, K = K, error = error)
datA = data$dataA
datB = data$dataB
prev = data$prev
nA = nrow(datA)
nB = nrow(datB)
comp_mat <- compare3(datA, datB, K=K)
tol=1e-6
maxits = 500
## Using EM with the above estimated starting point
fit_1 = EM3(comp_mat, datA, datB, K, tol=tol, maxits = maxits)
g = fit_1$g
g[g<0]=0
Gmat = matrix(g, nrow = nB, byrow = TRUE)
opti_cate <- solve_LSAP(Gmat, maximum = TRUE)
predict_cate = cbind(seq_along(opti_cate), opti_cate)
# Percentage of correct link
TPR_FS11= sum(predict_cate[,2] == datB[,K+1])/nB
TPR_FS11
Gmat[which(Gmat < 0.5)] = 0
opti_cate <- solve_LSAP(Gmat, maximum = TRUE)
predict_cate = cbind(seq_along(opti_cate), opti_cate)
# Percentage of correct link
TPR_FS11= sum(predict_cate[,2] == datB[,K+1])/nB
TPR_FS11
predict_cate[,2]
length(predict_cate[,2])
predict_cate
g[g<0]=0
Gmat = matrix(g, nrow = nB, byrow = TRUE)
opti_cate <- solve_LSAP(Gmat, maximum = TRUE)
predict_cate = cbind(seq_along(opti_cate), opti_cate)
predict_cate
g = fit_1$g
g[g<0]=0
Gmat = matrix(g, nrow = nB, byrow = TRUE)
opti_cate <- solve_LSAP(Gmat, maximum = TRUE)
predict_cate = cbind(seq_along(opti_cate), opti_cate)
# Percentage of correct link
TPR_FS11= sum(predict_cate[,2] == datB[,K+1])/nB
Gmat2 = Gmat
Gmat2[Gmat2<0.5] = 0
opti_cate <- solve_LSAP(Gmat2, maximum = TRUE)
predict_cate = cbind(seq_along(opti_cate), opti_cate)
# Percentage of correct link
TPR_FS112= sum(predict_cate[,2] == datB[,K+1])/nB
TPR_FS11
TPR_FS112
opti_cate
a = predict_cate
a
b = (a[,1]-1)*nB + a[,2]
g[b]
sum(g[b]>0.5)
a
b = (a[,1]-1)*nA + a[,2]
library(doParallel)
library(clue)
library(matrixStats)
library(klaR)
library(ludic)
#library(doBy)
true_prob <- function(datA, datB, K, prev, error){
comp_mat <- compare4(datA, datB, K=K)
X.save = comp_mat
e = error
p = 1/nrow(datA)
N = nrow(comp_mat)
indM = (comp_mat[,K+1]==1)
indU = (comp_mat[,K+1]==0)
comp_mat = comp_mat[,1:K]
# To compute the true, you replace it with true parameters
p0M = (1-e)*(1-prev) #(0,0)
p1M = e*(1-prev) #(0,1)
p2M = e*prev #(1,0)
p3M = 1-p2M-p1M-p0M # (1,1)
p0U = (1-prev)*((1-e)*(1-prev)+e*prev) #(0,0)
p1U = (1-prev)*((1-e)*prev + e*(1-prev))  #(0,1)
p2U = prev*((1-e)*(1-prev) + e*prev)  #(1,0)
p3U = 1- p2U- p1U - p0U # (1,1)
c0 <- as.numeric(comp_mat==0)
c1 <- as.numeric(comp_mat==1)
c2 <- as.numeric(comp_mat==2)
c3 <- as.numeric(comp_mat==3)
p0M_mat = matrix(rep(p0M,N), nrow =N, byrow = TRUE)
p1M_mat = matrix(rep(p1M,N), nrow =N, byrow = TRUE)
p2M_mat = matrix(rep(p2M,N), nrow =N, byrow = TRUE)
p3M_mat = matrix(rep(p3M,N), nrow =N, byrow = TRUE)
p0U_mat = matrix(rep(p0U,N), nrow =N, byrow = TRUE)
p1U_mat = matrix(rep(p1U,N), nrow =N, byrow = TRUE)
p2U_mat = matrix(rep(p2U,N), nrow =N, byrow = TRUE)
p3U_mat = matrix(rep(p3U,N), nrow =N, byrow = TRUE)
probM = rowProds(p0M_mat^(c0)*p1M_mat^(c1)*p2M_mat^(c2)*p3M_mat^(c3))
probU = rowProds(p0U_mat^(c0)*p1U_mat^(c1)*p2U_mat^(c2)*p3U_mat^(c3))
g = p*probM/(p*probM+(1-p)*probU)
m0 = p0M
m1 = p1M + p2M
m2 = 1- m0 - m1
m_true = rbind(m0,m1,m2)
u0 = p0U
u1 = p1U + p2U
u2 = 1- u0 - u1
u_true = rbind(u0,u1,u2)
return(list(g_true = g, indM = indM, indU = indU, comp_mat4 = X.save, m2 = m2, m1 = m1, m0 = m0, u2 = u2, u1 = u1, u0 = u0))
}
error_prob <- function(g, g_true, indM, indU){
nM = sum(indM)
nU = sum(indU)
N = nM+ nU
RE = 1/N*sum(abs(g-g_true)/g_true)
REM = 1/nM*sum(abs(g[indM]-g_true[indM])/g_true[indM])
#REU = 1/nU*sum(abs(g[indU]-g_true[indU])/g_true[indU])
REU = 1/nU*sum(abs(g[indU]-g_true[indU])/(1-g_true[indU]))
AE = 1/N*sum(abs(g-g_true))
AEM = 1/nM*sum(abs(g[indM]-g_true[indM]))
AEU = 1/nU*sum(abs(g[indU]-g_true[indU]))
return(c(RE,REM,REU,AE,AEM,AEU))
}
FS <- function(datA, datB, K, g_true, indM, indU,tol=1e-6, maxits = 500){
nA = nrow(datA)
nB =  nrow(datB)
comp_mat <- compare_binary(datA, datB, K)
fit <- EM_binary(comp_mat, datA, datB, K,tol = tol, maxits = maxits)
g = fit$g
Error = error_prob(g, g_true, indM, indU)
g[g<0]=0
Gmat = matrix(g, nrow = nB, byrow = TRUE)
opti_binary <- solve_LSAP(Gmat, maximum = TRUE)
predict_binary = cbind(seq_along(opti_binary), opti_binary)
# Percentage of correct link
TPR_FS11 = sum(predict_binary[,2] == datB[,K+1])/nB
threshold = 0.5
index = which(g>= threshold)
TPR_FS5 = sum(comp_mat[index,K+1])/nB
if (length(index)==0){
PPV_FS5 = 0
}else{
PPV_FS5 = sum(comp_mat[index,K+1])/length(index)
}
threshold = 0.9
index = which(g>= threshold)
TPR_FS9 = sum(comp_mat[index,K+1])/nB
if (length(index)==0){
PPV_FS9 = 0
}else{
PPV_FS9 = sum(comp_mat[index,K+1])/length(index)
}
return(c(TPR_FS11,TPR_FS5, PPV_FS5, TPR_FS9, PPV_FS9, Error))
}
# Fellegi-Sunter with 3 categorical comparison
FS3 <- function(datA, datB, K, g_true, indM, indU, tol=1e-6, maxits = 500){
nA = nrow(datA)
nB = nrow(datB)
comp_mat <- compare3(datA, datB, K=K)
## Using EM with the above estimated starting point
fit_1 = EM3(comp_mat, datA, datB, K, tol=tol, maxits = maxits)
g = fit_1$g
Error = error_prob(g, g_true,indM, indU)
g[g<0]=0
Gmat = matrix(g, nrow = nB, byrow = TRUE)
opti_cate <- solve_LSAP(Gmat, maximum = TRUE)
predict_cate = cbind(seq_along(opti_cate), opti_cate)
# Percentage of correct link
TPR_FS11= sum(predict_cate[,2] == datB[,K+1])/nB
TPR_FS11
Gmat2 = Gmat
Gmat2[Gmat2<0.5] = 0
opti_cate <- solve_LSAP(Gmat2, maximum = TRUE)
sum(g[])
+
}
b
sum(g[b]>=0.5)
TPR_FS112
0.635*200
predict_cate[,2] == datB[,K+1]
Gmat = matrix(g, nrow = nB, byrow = TRUE)
opti_cate <- solve_LSAP(Gmat, maximum = TRUE)
predict_cate1 = cbind(seq_along(opti_cate), opti_cate)
# Percentage of correct link
TPR_FS11= sum(predict_cate[,2] == datB[,K+1])/nB
TPR_FS11
Gmat2 = Gmat
Gmat2[Gmat2<0.5] = 0
opti_cate <- solve_LSAP(Gmat2, maximum = TRUE)
predict_cate2 = cbind(seq_along(opti_cate), opti_cate)
# Percentage of correct link
TPR_FS112= sum(predict_cate[,2] == datB[,K+1])/nB
TPR_FS112
g = fit_1$g
g[g<0]=0
Gmat = matrix(g, nrow = nB, byrow = TRUE)
opti_cate <- solve_LSAP(Gmat, maximum = TRUE)
predict_cate1 = cbind(seq_along(opti_cate), opti_cate)
# Percentage of correct link
TPR_FS11= sum(predict_cate[,2] == datB[,K+1])/nB
TPR_FS11
Gmat2 = Gmat
Gmat2[Gmat2<0.5] = 0
opti_cate <- solve_LSAP(Gmat2, maximum = TRUE)
predict_cate2 = cbind(seq_along(opti_cate), opti_cate)
# Percentage of correct link
TPR_FS112= sum(predict_cate[,2] == datB[,K+1])/nB
TPR_FS112
g = fit_1$g
g[g<0]=0
Gmat = matrix(g, nrow = nB, byrow = TRUE)
opti_cate <- solve_LSAP(Gmat, maximum = TRUE)
predict_cate1 = cbind(seq_along(opti_cate), opti_cate)
# Percentage of correct link
TPR_FS11= sum(predict_cate[,2] == datB[,K+1])/nB
TPR_FS11
Gmat2 = Gmat
Gmat2[Gmat2<0.5] = 0
opti_cate <- solve_LSAP(Gmat2, maximum = TRUE)
predict_cate2 = cbind(seq_along(opti_cate), opti_cate)
# Percentage of correct link
TPR_FS112= sum(predict_cate[,2] == datB[,K+1])/nB
TPR_FS112
g[g<0]=0
Gmat = matrix(g, nrow = nB, byrow = TRUE)
opti_cate <- solve_LSAP(Gmat, maximum = TRUE)
predict_cate1 = cbind(seq_along(opti_cate), opti_cate)
# Percentage of correct link
TPR_FS11= sum(predict_cate1[,2] == datB[,K+1])/nB
TPR_FS11
Gmat2 = Gmat
Gmat2[Gmat2<0.5] = 0
opti_cate <- solve_LSAP(Gmat2, maximum = TRUE)
predict_cate2 = cbind(seq_along(opti_cate), opti_cate)
# Percentage of correct link
TPR_FS112= sum(predict_cate2[,2] == datB[,K+1])/nB
TPR_FS112
TPR_FS11
temp1 = (predict_cate1[,1]-1)*nA+ predict_cate1[,2]
sum(g[temp1]>=0.5)
TPR_FS112
temp2 = (predict_cate2[,1]-1)*nA+ predict_cate2[,2]
sum(g[temp2]>=0.5)
139/200
sum(g>0.5)
sum(g>=0.5)
(predict_cate2[,2] == datB[,K+1])&(g[temp2]>=0.5)
sum((predict_cate2[,2] == datB[,K+1])&(g[temp2]>=0.5))
127/200
TPR_FS112= sum(predict_cate2[,2] == datB[,K+1])/nB
TPR_FS112
g[temp2]>=0.5)
sum(g[temp2]>=0.5)
127/140
g = fit_1$g
Gmat = matrix(g, nrow = nB, byrow = TRUE)
Gmat[Gmat<0.5] = 0
opti_cate <- solve_LSAP(Gmat, maximum = TRUE)
predict_cate = cbind(seq_along(opti_cate), opti_cate)
temp = (predict_cate[,1]-1)*nA+ predict_cate[,2]
# Percentage of correct link
nPredict = sum((g[temp]>=0.5))
nTruePredict = sum((predict_cate[,2] == datB[,K+1])&(g[temp]>=0.5))
TPR_FS11= nTruePredict/nB
PPV_FS11 = nTruePredict/nPredict
TPR
TPR_FS11
PPV_FS11
set.seed(123)
ncodes <- 500
npat <- 200
incid <- abs(rnorm(n=ncodes, 0.15, 0.07))
incid
bin_codes <- rbinom(n=npat*ncodes, size=1,  prob=rep(incid, npat))
bin_codes_mat <- matrix(bin_codes, ncol=ncodes, byrow = TRUE)
bin_codes_mat
data1_ex <- bin_codes_mat[1:(npat/2+npat/10),]
data2_ex <- bin_codes_mat[c(1:(npat/10), (npat/2+npat/10 + 1):npat), ]
(npat/2+npat/10)
c(1:(npat/10), (npat/2+npat/10 + 1):npat)
rep(1,3.5)
rep(1,3.7)
nB = nrow(datB)
nA = nrow(datA)
bayes = recordLink(datB[,1:K], datA[,1:K], eps_plus =0.01, eps_minus = 0.01,use_diff = FALSE)
g = as.vector(t(bayes))
Gmat = bayes
Gmat[Gmat<0.5] = 0
opti_cate <- solve_LSAP(Gmat, maximum = TRUE)
predict_cate = cbind(seq_along(opti_cate), opti_cate)
temp = (predict_cate[,1]-1)*nA+ predict_cate[,2]
# Percentage of correct link
nPredict = sum((g[temp]>=0.5))
nTruePredict = sum((predict_cate[,2] == datB[,K+1])&(g[temp]>=0.5))
TPR_bayes11= nTruePredict/nB
PPV_bayes11 = nTruePredict/nPredict
TPR_bayes11
PPV_bayes11
library(simsalapar)
library(doParallel)
library(clue)
library(matrixStats)
library(klaR)
library(ludic)
nA = 500
nB = 200
K = 20
error = 0.05
source("1_generate_data.R")
source("2_compare.R")
source("3_EM.R")
source("4_methods.R")
data = generate_data(nA = nA, nB = nB, K = K, error = error)
datA = data$dataA
datB = data$dataB
prev = data$prev
g <- true_prob(datA, datB, K, prev, error)
g_true = g$g_true
indM = g$indM
indU = g$indU
comp_mat4 = g$comp_mat4
FS <- FS(datA, datB, K, g_true, indM, indU, tol=1e-6, maxits = 500)
FS3 <- FS3(datA, datB, K,  g_true, indM, indU, tol=1e-6, maxits = 500)
FS4 <- FS4(datA, datB, K, comp_mat4, g_true, indM, indU, tol=1e-6, maxits = 500)
Bayesian <- bayesian(datA, datB, K,  g_true, indM, indU)
FS
rbind(FS,FS3,FS4)
library(simsalapar)
library(doParallel)
library(clue)
library(matrixStats)
library(klaR)
library(ludic)
nA = 200
nB = 100
K = 20
error = 0.05
source("1_generate_data.R")
source("2_compare.R")
source("3_EM.R")
source("4_methods.R")
data = generate_data(nA = nA, nB = nB, K = K, error = error)
datA = data$dataA
datB = data$dataB
prev = data$prev
g <- true_prob(datA, datB, K, prev, error)
g_true = g$g_true
indM = g$indM
indU = g$indU
comp_mat4 = g$comp_mat4
FS <- FS(datA, datB, K, g_true, indM, indU, tol=1e-6, maxits = 500)
FS3 <- FS3(datA, datB, K,  g_true, indM, indU, tol=1e-6, maxits = 500)
FS4 <- FS4(datA, datB, K, comp_mat4, g_true, indM, indU, tol=1e-6, maxits = 500)
Bayesian <- bayesian(datA, datB, K,  g_true, indM, indU)
rbind(FS,FS3,FS4)
rbind(FS,FS3)
source("1_generate_data.R")
source("2_compare.R")
source("3_EM.R")
source("4_methods.R")
data = generate_data(nA = nA, nB = nB, K = K, error = error)
datA = data$dataA
datB = data$dataB
prev = data$prev
g <- true_prob(datA, datB, K, prev, error)
g_true = g$g_true
indM = g$indM
indU = g$indU
comp_mat4 = g$comp_mat4
FS <- FS(datA, datB, K, g_true, indM, indU, tol=1e-6, maxits = 500)
FS3 <- FS3(datA, datB, K,  g_true, indM, indU, tol=1e-6, maxits = 500)
FS4 <- FS4(datA, datB, K, comp_mat4, g_true, indM, indU, tol=1e-6, maxits = 500)
Bayesian <- bayesian(datA, datB, K,  g_true, indM, indU)
rbind(FS,FS3,FS4,Bayesian)
length(Bayesian)
length(FS)
length(FS3)
source("1_generate_data.R")
source("2_compare.R")
source("3_EM.R")
source("4_methods.R")
data = generate_data(nA = nA, nB = nB, K = K, error = error)
datA = data$dataA
datB = data$dataB
prev = data$prev
nA = 20
nB = 10
K = 20
error = 0.05
source("1_generate_data.R")
source("2_compare.R")
source("3_EM.R")
source("4_methods.R")
data = generate_data(nA = nA, nB = nB, K = K, error = error)
datA = data$dataA
datB = data$dataB
prev = data$prev
g <- true_prob(datA, datB, K, prev, error)
g_true = g$g_true
indM = g$indM
indU = g$indU
comp_mat4 = g$comp_mat4
FS <- FS(datA, datB, K, g_true, indM, indU, tol=1e-6, maxits = 500)
FS
FS3 <- FS3(datA, datB, K,  g_true, indM, indU, tol=1e-6, maxits = 500)
FS4 <- FS4(datA, datB, K, comp_mat4, g_true, indM, indU, tol=1e-6, maxits = 500)
Bayesian <- bayesian(datA, datB, K,  g_true, indM, indU)
rbind(FS,FS3,FS4,Bayesian)
start <- start_3(datA, datB, K)
p = start[1]
m22 = start[2:(K+1)]
m21 = start[(K+2):(2*K+1)]
m20 = start[(2*K+2):(3*K+1)]
u22 = start[(3*K+2):(4*K+1)]
u21 = start[(4*K+2):(5*K+1)]
u20 = start[(5*K+2):(6*K+1)]
# initializations
comp_mat  <- comp_mat[,1:K]
N <- nrow(comp_mat)
c20 <- as.numeric(comp_mat==0)
c21 <- as.numeric(comp_mat==1)
c22 <- as.numeric(comp_mat==2)
loglikelihood <- function(p,N,m22, m21, m20, u22,u21, u20, c22, c21, c20){
p2 = E3(m22, m21, m20, u22,u21, u20, N, c22, c21, c20)
pM = p2[,1]
pU = p2[,2]
ll = sum(log(p*pM+(1-p)*pU)) #likelihood not complete likelihood
return(ll)
}
iter <- 0
converge = 1
diff <- tol + 1
old.ll = loglikelihood(p,N,m22, m21, m20, u22,u21, u20, c22, c21, c20)
ll = old.ll
coverge
converge
while (diff > tol && iter < maxits){
p.old = p
m22.old = m22 #length K2
m21.old = m21 #length K2
m20.old = m20
u22.old = u22 #length K2
u21.old = u21 #length K2
u20.old = u20
############################ E step
p2 = E3(m22, m21, m20, u22,u21, u20, N, c22, c21, c20)
pM = p2[,1]
pU = p2[,2]
# Expectations
g = p*pM/(p*pM+(1-p)*pU)
############################### M step
p = sum(g)/N
max2 = M3(g,K,c22,c21,c20)
m22 = max2$m22
m21 = max2$m21
m20 = max2$m20
u22 = max2$u22
u21 = max2$u21
u20 = max2$u20
m = rbind(m20,m21,m22)
u = rbind(u20,u21,u22)
### Stopping
new.ll = loglikelihood(p,N,m22, m21, m20, u22,u21, u20, c22, c21, c20)
diff <- new.ll - old.ll
old.ll <- new.ll
ll <- c(ll, old.ll)
iter = iter + 1
if (iter == maxits) {
cat("WARNING! NOT CONVERGENT!", "\n")}
converge = 0
}
source("1_generate_data.R")
source("2_compare.R")
source("3_EM.R")
source("4_methods.R")
data = generate_data(nA = nA, nB = nB, K = K, error = error)
datA = data$dataA
datB = data$dataB
prev = data$prev
g <- true_prob(datA, datB, K, prev, error)
g_true = g$g_true
indM = g$indM
indU = g$indU
comp_mat4 = g$comp_mat4
FS <- FS(datA, datB, K, g_true, indM, indU, tol=1e-6, maxits = 500)
FS3 <- FS3(datA, datB, K,  g_true, indM, indU, tol=1e-6, maxits = 500)
FS4 <- FS4(datA, datB, K, comp_mat4, g_true, indM, indU, tol=1e-6, maxits = 500)
Bayesian <- bayesian(datA, datB, K,  g_true, indM, indU)
rbind(FS,FS3,FS4, Bayesian)
prev
